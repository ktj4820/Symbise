[*

//Structs
function NODE()
{
  var type;
  var value;
  var children;
}

//Defines
var NODE_OP = 0;
var NODE_SYM  = 1;
var NODE_INT  = 2;
var NODE_FUNC = 3;

var OP_ADD  = 10;
var OP_SUB  = 11;
var OP_DIV  = 12;
var OP_MUL  = 13;
var OP_NEG  = 14;
var OP_POW  = 15;

var FUNC_SQRT = 20;
var FUNC_EXP = 21;
var FUNC_NLOG = 22;
var FUNC_BLOG = 23;
var FUNC_SIN = 24;
var FUNC_COS = 25;
var FUNC_TAN = 26;
var FUNC_SINH = 27;
var FUNC_COSH = 28;
var FUNC_TANH = 29;
var FUNC_ASIN = 30;
var FUNC_ACOS = 31;
var FUNC_ATAN = 32;
var FUNC_ASINH = 33;
var FUNC_ACOSH = 34;
var FUNC_ATANH = 35;
var FUNC_SEC = 36;
var FUNC_SECH = 37;
var FUNC_ASEC = 38;
var FUNC_ASECH = 39;
var FUNC_CSC = 40;
var FUNC_CSCH = 41;
var FUNC_ACSC = 42;
var FUNC_ACSCH = 43;
var FUNC_COT = 44;
var FUNC_COTH = 45;
var FUNC_ACOT = 46;
var FUNC_ACOTH = 47;

var FUNC_DIFF = 50;

//Management functions
function createNode( type, value, childs )
{
  var n = new NODE();
  n.type = type;
  n.value = value;
  n.children = new Array();

  for( var i = 2; i < arguments.length; i++ )
    n.children.push( arguments[i] );

  return n;
}

function execute( node )
{
  var ret = 0;

  if( !node )
    return 0;

  switch( node.type )
  {
    case NODE_OP:
      switch( node.value )
      {
        case OP_ADD:
          ret = execute( node.children[0] ) + execute( node.children[1] );
          break;
        case OP_SUB:
          ret = execute( node.children[0] ) - execute( node.children[1] );
          break;
        case OP_DIV:
          ret = execute( node.children[0] ) / execute( node.children[1] );
          break;
        case OP_MUL:
          ret = execute( node.children[0] ) * execute( node.children[1] );
          break;
        case OP_NEG:
          ret = execute( node.children[0] ) * -1;
          break;
        case OP_POW:
          ret = Math.pow(execute( node.children[0] ), execute( node.children[1] ));
      }
      break;

    case NODE_FUNC:
      switch( node.value )
      {
        case FUNC_SIN:
          ret = Math.sin( execute( node.children[0] ) );
          break;
        case FUNC_COS:
          ret = Math.cos( execute( node.children[0] ) );
          break;
        case FUNC_TAN:
          ret = Math.tan( execute( node.children[0] ) );
          break;
        case FUNC_SINH:
          ret = Math.sinh( execute( node.children[0] ) );
          break;
        case FUNC_COSH:
          ret = Math.cosh( execute( node.children[0] ) );
          break;
        case FUNC_TANH:
          ret = Math.tanh( execute( node.children[0] ) );
          break;
        case FUNC_ASIN:
          ret = Math.asin( execute( node.children[0] ) );
          break;
        case FUNC_ACOS:
          ret = Math.acos( execute( node.children[0] ) );
          break;
        case FUNC_ATAN:
          ret = Math.atan( execute( node.children[0] ) );
          break;
        case FUNC_ASINH:
          ret = Math.asin( execute( node.children[0] ) );
          break;
        case FUNC_ACOSH:
          ret = Math.acosh( execute( node.children[0] ) );
          break;
        case FUNC_ATANH:
          ret = Math.atanh( execute( node.children[0] ) );
          break;
        case FUNC_CSC:
          ret = 1 / Math.sin( execute( node.children[0] ) );
          break;
        case FUNC_SEC:
          ret = 1 / Math.cos( execute( node.children[0] ) );
          break;
        case FUNC_COT:
          ret = 1 / Math.tan( execute( node.children[0] ) );
          break;
        case FUNC_CSCH:
          ret = 1 / Math.sin( execute( node.children[0] ) );
          break;
        case FUNC_SECH:
          ret = 1 / Math.cos( execute( node.children[0] ) );
          break;
        case FUNC_COTH:
          ret = 1 / Math.tan( execute( node.children[0] ) );
          break;
        case FUNC_ACSC:
          ret = Math.asin(1 / execute( node.children[0] ) );
          break;
        case FUNC_ASEC:
          ret = Math.acos(1 / execute( node.children[0] ) );
          break;
        case FUNC_ACOT:
          ret = Math.atan(1 / execute( node.children[0] )) ;
          break;
        case FUNC_ACSCH:
          var func_executed = execute( node.children[0] );
          ret = Math.log(1/ func_executed + Maths.qrt(1/Math.pow( func_executed ,2) + 1));
          break;
        case FUNC_ASECH:
          var func_executed = execute( node.children[0] );
          ret = Math.log(Math.sqrt(1/Math.pow(func_executed, 2) - 1) + 1/ func_executed);
          break;
        case FUNC_ACOTH:
          var func_executed = execute( node.children[0] );
          ret = (Math.log((func_executed+ 1) / func_executed) + Math.log(func_executed/(func_executed-1))) / 2;
          break;
        case FUNC_SQRT:
          ret = Math.sqrt( execute( node.children[0] ) );
          break;
        case FUNC_EXP:
          ret = Math.exp( execute( node.children[0] ) );
          break;
        case FUNC_NLOG:
          ret = Math.log( execute( node.children[0] ) );
          break;
        case FUNC_BLOG:
          ret = Math.log( execute( node.children[1] ) ) / Math.log( execute( node.children[0] ) );
          break;
      }
      break;

    case NODE_SYM:
      ret = "x";
      break;

    case NODE_INT:
      ret = Number( node.value );
      break;
  }

  return ret;
}

*]

/~ --- Token definitions --- ~/

/~ Characters to be ignored ~/
!   ' |\t' ;

/~ Non-associative tokens ~/
    '\+'
    '\-'
    '\*'
    '/'
    '\^'
    'sin'
    'cos'
    'tan'
    'sinh'
    'cosh'
    'tanh'
    'asin'
    'acos'
    'atan'
    'asinh'
    'acosh'
    'atanh'
    'sec'
    'asec'
    'sech'
    'asech'
    'csc'
    'acsc'
    'csch'
    'acsch'
    'cot'
    'acot'
    'coth'
    'acoth'
    'sqrt'
    'exp'
    'log'
    '\('
    '\)'
    '[A-Za-z]'        IDENTIFIER
    '[0-9]+'                        INT   [* %match = parseInt( %match ); *]
    '[0-9]+\.[0-9]*|[0-9]*\.[0-9]+' FLOAT [* %match = parseFloat( %match ); *]
    ;

##

/~ --- Grammar specification --- ~/

p:      e              [* initparser(%1); *]
        ;

e:          e '-' MulDivExp   [* %% = createNode( NODE_OP, OP_SUB, %1, %3 ); *]
            | e '+' MulDivExp [* %% = createNode( NODE_OP, OP_ADD, %1, %3 ); *]
            | MulDivExp
            ;

MulDivExp:  MulDivExp '*' DivExp      [* %% = createNode( NODE_OP, OP_MUL, %1, %3 ); *]
            | DivExp
            | MulNonExp NonNegDivExp           [* %% = createNode( NODE_OP, OP_MUL, %1, %2 ); *]
            ;

DivExp:     DivExp '/' PowExp         [* %% = createNode( NODE_OP, OP_DIV, %1, %3 ); *]
            | PowExp
            ;

MulNonExp:  MulNonExp NonNegDivExp           [* %% = createNode( NODE_OP, OP_MUL, %1, %2 ); *]
            | DivExp
            ;

NonNegDivExp:NonNegDivExp '/' NonNegPowExp    [* %% = createNode( NODE_OP, OP_DIV, %1, %3 ); *]
            | NonNegPowExp
            ;

PowExp:     PowExp '^' NegExp   [* %% = createNode( NODE_OP, OP_POW, %1, %3 ); *]
            | NegExp
            ;

NonNegPowExp:NonNegPowExp '^' NegExp   [* %% = createNode( NODE_OP, OP_POW, %1, %3 ); *]
            | Value
            ;

NegExp:     '-' Value           [* %% = createNode( NODE_OP, OP_NEG, %2 ); *]
            | Value
            ;

Value:      NumericValue
            | IDENTIFIER        [* %% = createNode( NODE_SYM, %1 ); *]
            | ParenExp
            ;

NumericValue: INT               [* %% = createNode( NODE_INT, %1 ); *]
            | FLOAT             [* %% = createNode( NODE_INT, %1 ); *]
            ;

ParenExp:   '(' e ')'           [* %% = %2; *]
            | 'sin' '(' e ')'   [* %% = createNode( NODE_FUNC, FUNC_SIN, %3 ); *]
            | 'sinh' '(' e ')'  [* %% = createNode( NODE_FUNC, FUNC_SINH, %3 ); *]
            | 'asin' '(' e ')'  [* %% = createNode( NODE_FUNC, FUNC_ASIN, %3 ); *]
            | 'asinh' '(' e ')' [* %% = createNode( NODE_FUNC, FUNC_ASINH, %3 ); *]
            | 'cos' '(' e ')'   [* %% = createNode( NODE_FUNC, FUNC_COS, %3 ); *]
            | 'cosh' '(' e ')'  [* %% = createNode( NODE_FUNC, FUNC_COSH, %3 ); *]
            | 'acos' '(' e ')'  [* %% = createNode( NODE_FUNC, FUNC_ACOS, %3 ); *]
            | 'acosh' '(' e ')' [* %% = createNode( NODE_FUNC, FUNC_ACOSH, %3 ); *]
            | 'tan' '(' e ')'   [* %% = createNode( NODE_FUNC, FUNC_TAN, %3 ); *]
            | 'tanh' '(' e ')'  [* %% = createNode( NODE_FUNC, FUNC_TANH, %3 ); *]
            | 'atan' '(' e ')'  [* %% = createNode( NODE_FUNC, FUNC_ATAN, %3 ); *]
            | 'atanh' '(' e ')' [* %% = createNode( NODE_FUNC, FUNC_ATANH, %3 ); *]
            | 'sec' '(' e ')'   [* %% = createNode( NODE_FUNC, FUNC_SEC, %3 ); *]
            | 'sech' '(' e ')'  [* %% = createNode( NODE_FUNC, FUNC_SECH, %3 ); *]
            | 'asec' '(' e ')'  [* %% = createNode( NODE_FUNC, FUNC_ASEC, %3 ); *]
            | 'asech' '(' e ')' [* %% = createNode( NODE_FUNC, FUNC_ASECH, %3 ); *]
            | 'csc' '(' e ')'   [* %% = createNode( NODE_FUNC, FUNC_CSC, %3 ); *]
            | 'csch' '(' e ')'  [* %% = createNode( NODE_FUNC, FUNC_CSCH, %3 ); *]
            | 'acsc' '(' e ')'  [* %% = createNode( NODE_FUNC, FUNC_ACSC, %3 ); *]
            | 'acsch' '(' e ')' [* %% = createNode( NODE_FUNC, FUNC_ACSCH, %3 ); *]
            | 'cot' '(' e ')'   [* %% = createNode( NODE_FUNC, FUNC_COT, %3 ); *]
            | 'coth' '(' e ')'  [* %% = createNode( NODE_FUNC, FUNC_COTH, %3 ); *]
            | 'acot' '(' e ')'  [* %% = createNode( NODE_FUNC, FUNC_ACOT, %3 ); *]
            | 'acoth' '(' e ')' [* %% = createNode( NODE_FUNC, FUNC_ACOTH, %3 ); *]
            | 'sqrt' '(' e ')'  [* %% = createNode( NODE_FUNC, FUNC_SQRT, %3 ); *]
            | 'exp' '(' e ')'   [* %% = createNode( NODE_OP, OP_POW, createNode( NODE_SYM, "e" ), %3 ); *] /~ --- createNode( NODE_FUNC, FUNC_EXP, %3 ); --- ~/
            | 'log' '(' e ')'   [* %% = createNode( NODE_FUNC, FUNC_NLOG, %3 ); *]
            | 'log' NumericValue '(' e ')'          [* %% = createNode( NODE_FUNC, FUNC_BLOG, %2, %4 ); *]
            ;
