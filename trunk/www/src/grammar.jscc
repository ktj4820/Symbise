[*

//Structs
function NODE()
{
  var type;
  var value;
  var children;
}

//Defines
var NODE_OP = 0;
var NODE_VAR  = 1;
var NODE_CONST  = 2;

var OP_ADD  = 16;
var OP_SUB  = 17;
var OP_DIV  = 18;
var OP_MUL  = 19;
var OP_NEG  = 20;
var OP_POW  = 15;

var OP_SIN = 21;
var OP_COS = 22;
var OP_LOG = 23;

//Management functions
function createNode( type, value, childs )
{
  var n = new NODE();
  n.type = type;
  n.value = value;  
  n.children = new Array();
  
  for( var i = 2; i < arguments.length; i++ )
    n.children.push( arguments[i] );
    
  return n;
}

function execute( node )
{
  var ret = 0;
  
  if( !node )
    return 0;
    
  switch( node.type )
  {
    case NODE_OP:
      switch( node.value )
      {
        case OP_ADD:
          ret = execute( node.children[0] ) + execute( node.children[1] );
          break;
        case OP_SUB:
          ret = execute( node.children[0] ) - execute( node.children[1] );
          break;
        case OP_DIV:
          ret = execute( node.children[0] ) / execute( node.children[1] );
          break;
        case OP_MUL:
          ret = execute( node.children[0] ) * execute( node.children[1] );
          break;
        case OP_NEG:
          ret = execute( node.children[0] ) * -1;
          break;
        case OP_POW:
          ret = Math.pow(execute( node.children[0] ), execute( node.children[1] ));
        case OP_SIN:
          ret = Math.sin( execute( node.children[0] ) );
          break;
        case OP_COS:
          ret = Math.cos( execute( node.children[0] ) );
          break;  
      }
      break;

    case NODE_VAR:
      ret = "TESTE";
      break;
      
    case NODE_CONST:
      ret = Number( node.value );
      break;
  }
  
  return ret;
}

*]

/~ --- Token definitions --- ~/

/~ Characters to be ignored ~/
!   ' |\t' ;

/~ Non-associative tokens ~/
    '\+'
    '\-'
    '\*'
    '/'
    '\^'
    'sin'
    'cos'
    'log'
    '\('
    '\)'
    '[A-Za-z_][A-Za-z0-9_]*'        IDENTIFIER
    '[0-9]+'                        INT   [* %match = parseInt( %match ); *]
    '[0-9]+\.[0-9]*|[0-9]*\.[0-9]+' FLOAT [* %match = parseFloat( %match ); *]
    ;

##

/~ --- Grammar specification --- ~/

p:      e              [* initparser(%1); *]
        ;

e:          e '-' MulDivExp   [* %% = createNode( NODE_OP, OP_SUB, %1, %3 ); *]
            | e '+' MulDivExp [* %% = createNode( NODE_OP, OP_ADD, %1, %3 ); *]
            | MulDivExp
            ;
        
MulDivExp:  MulDivExp '*' PowExp    [* %% = createNode( NODE_OP, OP_MUL, %1, %3 ); *]
            | INT IDENTIFIER        [* %% = createNode( NODE_OP, OP_MUL, %1, %2 ); *]
            | FLOAT IDENTIFIER      [* %% = createNode( NODE_OP, OP_MUL, %1, %2 ); *]
            | MulDivExp '/' PowExp    [* %% = createNode( NODE_OP, OP_DIV, %1, %3 ); *]
            | PowExp
            ;

PowExp:     PowExp '^' NegExp [* %% = createNode( NODE_OP, OP_POW, %1, %3 ); *]
            | NegExp
            ;
        
NegExp:     '-' Value     [* %% = createNode( NODE_OP, OP_NEG, %2 ); *]
            | Value
            ;

Value:      INT               [* %% = createNode( NODE_CONST, %1 ); *]
            | FLOAT           [* %% = createNode( NODE_CONST, %1 ); *]
            | IDENTIFIER      [* %% = createNode( NODE_VAR, %1 ); *]
            | '(' e ')'       [* %% = %2; *]
            | 'sin' '(' e ')' [* %% = createNode( NODE_OP, OP_SIN, %3 ); *]
            | 'cos' '(' e ')' [* %% = createNode( NODE_OP, OP_COS, %3 ); *]
            | 'log' '(' e ')' [* %% = createNode( NODE_OP, OP_LOG, %3 ); *]
            ;